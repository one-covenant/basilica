use std::collections::HashMap;

use alloy::rpc::types::Filter;
use alloy::signers::{local::PrivateKeySigner, Signer};
use alloy_primitives::{Address, FixedBytes, U256};
use alloy_provider::{Provider, ProviderBuilder};
use alloy_sol_types::{sol, SolEvent};
pub mod config;
pub mod proxy;
use tracing::info;
pub use CollateralUpgradeable::{Deposit, Reclaimed, Slashed};

#[cfg(test)]
mod tests;

use config::{CollateralNetworkConfig, MAX_BLOCKS_PER_SCAN};

sol!(
    #[allow(missing_docs)]
    #[sol(
        rpc,
        bytecode = "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b620001ee565b60006200006d6200016560201b60201c565b90508060000160089054906101000a900460ff1615620000b9576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620001625767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001599190620001d1565b60405180910390a15b50565b600080620001786200018160201b60201c565b90508091505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b600067ffffffffffffffff82169050919050565b620001cb81620001ac565b82525050565b6000602082019050620001e86000830184620001c0565b92915050565b608051613dbb620002186000396000818161258a015281816125df015261287b0152613dbb6000f3fe6080604052600436106101bb5760003560e01c8063679fcc21116100ec578063ad3cb1cc1161008a578063dac0ed0111610064578063dac0ed011461065a578063e00f7b8114610697578063e7ba0ceb146106c0578063f72c0d8b146106e9576101f2565b8063ad3cb1cc146105dd578063b4314e2b14610608578063d547741f14610631576101f2565b806396c42a0a116100c657806396c42a0a1461051d5780639b0b27a9146105485780639cf9631814610571578063a217fddf146105b2576101f2565b8063679fcc2114610478578063881cf23b146104b557806391d14854146104e0576101f2565b806336568abe116101595780634f1ef286116101335780634f1ef286146103ec578063501e4e911461040857806352d1902d146104245780635cfb298c1461044f576101f2565b806336568abe1461036f57806341e9d79d146103985780634a7393b2146103c1576101f2565b80630d8e6e2c116101955780630d8e6e2c146102b5578063231bd442146102e0578063248a9ca3146103095780632f2ff15d14610346576101f2565b806301ffc9a71461022457806306016f711461026157806307d867881461028c576101f2565b366101f2576040517f84ee6c0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f84ee6c0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561023057600080fd5b5061024b60048036038101906102469190612da5565b610714565b6040516102589190612ded565b60405180910390f35b34801561026d57600080fd5b5061027661078e565b6040516102839190612e25565b60405180910390f35b34801561029857600080fd5b506102b360048036038101906102ae9190612e76565b6107a0565b005b3480156102c157600080fd5b506102ca610c4a565b6040516102d79190612eb2565b60405180910390f35b3480156102ec57600080fd5b5061030760048036038101906103029190612fc0565b610c53565b005b34801561031557600080fd5b50610330600480360381019061032b919061305a565b61100f565b60405161033d9190613096565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061310f565b61103d565b005b34801561037b57600080fd5b506103966004803603810190610391919061310f565b61105f565b005b3480156103a457600080fd5b506103bf60048036038101906103ba919061318f565b6110da565b005b3480156103cd57600080fd5b506103d66111b5565b6040516103e39190612eb2565b60405180910390f35b610406600480360381019061040191906132fd565b6111bb565b005b610422600480360381019061041d9190613359565b6111da565b005b34801561043057600080fd5b50610439611476565b6040516104469190613096565b60405180910390f35b34801561045b57600080fd5b50610476600480360381019061047191906133c5565b6114a9565b005b34801561048457600080fd5b5061049f600480360381019061049a9190613359565b611877565b6040516104ac919061344f565b60405180910390f35b3480156104c157600080fd5b506104ca6118b9565b6040516104d7919061344f565b60405180910390f35b3480156104ec57600080fd5b506105076004803603810190610502919061310f565b6118df565b6040516105149190612ded565b60405180910390f35b34801561052957600080fd5b50610532611958565b60405161053f9190613479565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a9190612e76565b611972565b005b34801561057d57600080fd5b5061059860048036038101906105939190612e76565b611a0e565b6040516105a99594939291906134a3565b60405180910390f35b3480156105be57600080fd5b506105c7611a85565b6040516105d49190613096565b60405180910390f35b3480156105e957600080fd5b506105f2611a8c565b6040516105ff9190613575565b60405180910390f35b34801561061457600080fd5b5061062f600480360381019061062a9190613597565b611ac5565b005b34801561063d57600080fd5b506106586004803603810190610653919061310f565b611d45565b005b34801561066657600080fd5b50610681600480360381019061067c9190613359565b611d67565b60405161068e9190612eb2565b60405180910390f35b3480156106a357600080fd5b506106be60048036038101906106b9919061360b565b611d8c565b005b3480156106cc57600080fd5b506106e760048036038101906106e29190613693565b612171565b005b3480156106f557600080fd5b506106fe6122b3565b60405161070b9190613096565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107875750610786826122d7565b5b9050919050565b60008054906101000a900461ffff1681565b600060046000838152602001908152602001600020905060008160030154036107f5576040517f642e3ad700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610610850576040517f3355482c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160000154905060008260010160009054906101000a900460801b905060008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600084600301549050600460008781526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549067ffffffffffffffff0219169055505080600560008681526020019081526020016000206000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600082825461098691906136ef565b9250508190555080600360008681526020019081526020016000206000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020541015610a11576040517fc4d7ebda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008681526020019081526020016000206000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254610a6b91906136ef565b92505081905550826fffffffffffffffffffffffffffffffff191684877f5bad7ce9103a04027245449328134e980faffde663decc58fde44536d70e04cb8585604051610ab9929190613723565b60405180910390a460008273ffffffffffffffffffffffffffffffffffffffff1682604051610ae79061377d565b60006040518083038185875af1925050503d8060008114610b24576040519150601f19603f3d011682016040523d82523d6000602084013e610b29565b606091505b5050905080610b64576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008781526020019081526020016000206000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000205403610c41576000600260008781526020019081526020016000206000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050505050565b60006001905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cda576040517f5aa309bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008881526020019081526020016000206000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008103610d63576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80851115610d9d576040517f79080d0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8481610da991906136ef565b600360008981526020019081526020016000206000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600260008981526020019081526020016000206000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff1687604051610e8c9061377d565b60006040518083038185875af1925050503d8060008114610ec9576040519150601f19603f3d011682016040523d82523d6000602084013e610ece565b606091505b5050905080610f09576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868303610f9b576000600260008b815260200190815260200160002060008a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8173ffffffffffffffffffffffffffffffffffffffff16886fffffffffffffffffffffffffffffffff19168a7f59fb97be32a1253f478d846d76623d23d63de327cedb08d6ccacf150ff91fd7f8a8a8a8a604051610ffc94939291906137bf565b60405180910390a4505050505050505050565b60008061101a612341565b905080600001600084815260200190815260200160002060010154915050919050565b6110468261100f565b61104f81612369565b611059838361237d565b50505050565b61106761247e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110cb576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110d58282612486565b505050565b6000801b6110e781612369565b60008267ffffffffffffffff1611611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90613871565b60405180910390fd5b60008060169054906101000a900467ffffffffffffffff16905082600060166101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f8444b26d17d3348bc267c929756f105c91cb4e50cab0579e0ecdefa0c51b53ce81846040516111a8929190613891565b60405180910390a1505050565b60015481565b6111c3612588565b6111cc8261266e565b6111d6828261275a565b5050565b600154341015611216576040517f5945ea5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008481526020019081526020016000206000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113475733600260008581526020019081526020016000206000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113ad565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113ac576040517f9ea26eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b34600360008581526020019081526020016000206000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020600082825461140791906138ba565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1916847fe07d9525c767a77f1c54bc2ceffdade4dfdadae69f96c94dcdb65a2324632369346040516114699190612eb2565b60405180910390a4505050565b6000611480612879565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006114b3612900565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156115015750825b9050600060018367ffffffffffffffff16148015611536575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611544575080155b1561157b576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156115cb5760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff160361163a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116319061393a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036116a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a0906139a6565b60405180910390fd5b600088116116ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e390613a38565b60405180910390fd5b60008767ffffffffffffffff1611611739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173090613871565b60405180910390fd5b611741612914565b61174961291e565b896000806101000a81548161ffff021916908361ffff16021790555088600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508760018190555086600060166101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506117e36000801b8761237d565b5061180e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e38761237d565b50831561186b5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516118629190613a9d565b60405180910390a15b50505050505050505050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806118ea612341565b905080600001600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600060169054906101000a900467ffffffffffffffff1681565b6000801b61197f81612369565b600082116119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b990613a38565b60405180910390fd5b60006001549050826001819055507fcb15e5911a16310e744b07fe308cb14a2e854f08c4635c6c30f0f41b6aab3d5d8184604051611a01929190613ab8565b60405180910390a1505050565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900460801b908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900467ffffffffffffffff16905085565b6000801b81565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b4c576040517f5aa309bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004600086815260200190815260200160002090506000816003015403611ba1576040517f642e3ad700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611bfd576040517ffc9e5c0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060030154600560008360000154815260200190815260200160002060008360010160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254611c7091906136ef565b92505081905550847f6067048e78883441f7c7f1b3ad8f94a88b1567a486029be8a830e9455f61edb9858585604051611cab93929190613ae1565b60405180910390a2600460008681526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560038201600090556004820160006101000a81549067ffffffffffffffff021916905550505050505050565b611d4e8261100f565b611d5781612369565b611d618383612486565b50505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600260008681526020019081526020016000206000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e5b576040517f9ea26eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008781526020019081526020016000206000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000205490506000600560008881526020019081526020016000206000876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008183611f0791906136ef565b905060008103611f43576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060169054906101000a900467ffffffffffffffff1642611f669190613b13565b90506040518060a001604052808a8152602001896fffffffffffffffffffffffffffffffff191681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018267ffffffffffffffff168152506004600060065481526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505081600560008b815260200190815260200160002060008a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060008282546120ee91906138ba565b92505081905550876fffffffffffffffffffffffffffffffff1916896006547ffd3d4f1c9a32bf51e721c588fa66ff4eb6635b376d5689cc9fe4361ab901a17f3386868d8d8d60405161214696959493929190613b4f565b60405180910390a46006600081548092919061216190613bab565b9190505550505050505050505050565b6000801b61217e81612369565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e490613c65565b60405180910390fd5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f280dc165ab909ad5f771dbb3efc0591efc379b9a35ee781dd1472e09e8ec976060405160405180910390a3505050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b61237a8161237561247e565b612928565b50565b600080612388612341565b905061239484846118df565b61247257600181600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061240e61247e565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050612478565b60009150505b92915050565b600033905090565b600080612491612341565b905061249d84846118df565b1561257c57600081600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061251861247e565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050612582565b60009150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061263557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661261c612979565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561266c576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361269881612369565b8173ffffffffffffffffffffffffffffffffffffffff1660013073ffffffffffffffffffffffffffffffffffffffff16630d8e6e2c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190613c9a565b61272a91906138ba565b7f208a82eaf59643630be08b56d23aff3c045a061d5859a2d15e4e2cd7c31a1a4360405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156127c257506040513d601f19601f820116820180604052508101906127bf9190613cdc565b60015b61280357816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016127fa919061344f565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461286a57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016128619190613096565b60405180910390fd5b61287483836129d0565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146128fe576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008061290b612a43565b90508091505090565b61291c612a6e565b565b612926612a6e565b565b61293282826118df565b6129755780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161296c929190613d09565b60405180910390fd5b5050565b60006129a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612aae565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6129d982612ab8565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612a3657612a308282612b85565b50612a3f565b612a3e612c09565b5b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0060001b905090565b612a76612c46565b612aac576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612b1457806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612b0b919061344f565b60405180910390fd5b80612b417f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612aae565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612baf9190613d6e565b600060405180830381855af49150503d8060008114612bea576040519150601f19603f3d011682016040523d82523d6000602084013e612bef565b606091505b5091509150612bff858383612c66565b9250505092915050565b6000341115612c44576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612c50612900565b60000160089054906101000a900460ff16905090565b606082612c7b57612c7682612cf5565b612ced565b60008251148015612ca3575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612ce557836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612cdc919061344f565b60405180910390fd5b819050612cee565b5b9392505050565b600081511115612d0757805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d8281612d4d565b8114612d8d57600080fd5b50565b600081359050612d9f81612d79565b92915050565b600060208284031215612dbb57612dba612d43565b5b6000612dc984828501612d90565b91505092915050565b60008115159050919050565b612de781612dd2565b82525050565b6000602082019050612e026000830184612dde565b92915050565b600061ffff82169050919050565b612e1f81612e08565b82525050565b6000602082019050612e3a6000830184612e16565b92915050565b6000819050919050565b612e5381612e40565b8114612e5e57600080fd5b50565b600081359050612e7081612e4a565b92915050565b600060208284031215612e8c57612e8b612d43565b5b6000612e9a84828501612e61565b91505092915050565b612eac81612e40565b82525050565b6000602082019050612ec76000830184612ea3565b92915050565b6000819050919050565b612ee081612ecd565b8114612eeb57600080fd5b50565b600081359050612efd81612ed7565b92915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b612f3881612f03565b8114612f4357600080fd5b50565b600081359050612f5581612f2f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612f8057612f7f612f5b565b5b8235905067ffffffffffffffff811115612f9d57612f9c612f60565b5b602083019150836001820283011115612fb957612fb8612f65565b5b9250929050565b60008060008060008060a08789031215612fdd57612fdc612d43565b5b6000612feb89828a01612eee565b9650506020612ffc89828a01612f46565b955050604061300d89828a01612e61565b945050606087013567ffffffffffffffff81111561302e5761302d612d48565b5b61303a89828a01612f6a565b9350935050608061304d89828a01612f46565b9150509295509295509295565b6000602082840312156130705761306f612d43565b5b600061307e84828501612eee565b91505092915050565b61309081612ecd565b82525050565b60006020820190506130ab6000830184613087565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130dc826130b1565b9050919050565b6130ec816130d1565b81146130f757600080fd5b50565b600081359050613109816130e3565b92915050565b6000806040838503121561312657613125612d43565b5b600061313485828601612eee565b9250506020613145858286016130fa565b9150509250929050565b600067ffffffffffffffff82169050919050565b61316c8161314f565b811461317757600080fd5b50565b60008135905061318981613163565b92915050565b6000602082840312156131a5576131a4612d43565b5b60006131b38482850161317a565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61320a826131c1565b810181811067ffffffffffffffff82111715613229576132286131d2565b5b80604052505050565b600061323c612d39565b90506132488282613201565b919050565b600067ffffffffffffffff821115613268576132676131d2565b5b613271826131c1565b9050602081019050919050565b82818337600083830152505050565b60006132a061329b8461324d565b613232565b9050828152602081018484840111156132bc576132bb6131bc565b5b6132c784828561327e565b509392505050565b600082601f8301126132e4576132e3612f5b565b5b81356132f484826020860161328d565b91505092915050565b6000806040838503121561331457613313612d43565b5b6000613322858286016130fa565b925050602083013567ffffffffffffffff81111561334357613342612d48565b5b61334f858286016132cf565b9150509250929050565b600080604083850312156133705761336f612d43565b5b600061337e85828601612eee565b925050602061338f85828601612f46565b9150509250929050565b6133a281612e08565b81146133ad57600080fd5b50565b6000813590506133bf81613399565b92915050565b600080600080600060a086880312156133e1576133e0612d43565b5b60006133ef888289016133b0565b9550506020613400888289016130fa565b945050604061341188828901612e61565b93505060606134228882890161317a565b9250506080613433888289016130fa565b9150509295509295909350565b613449816130d1565b82525050565b60006020820190506134646000830184613440565b92915050565b6134738161314f565b82525050565b600060208201905061348e600083018461346a565b92915050565b61349d81612f03565b82525050565b600060a0820190506134b86000830188613087565b6134c56020830187613494565b6134d26040830186613440565b6134df6060830185612ea3565b6134ec608083018461346a565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613530578082015181840152602081019050613515565b60008484015250505050565b6000613547826134f6565b6135518185613501565b9350613561818560208601613512565b61356a816131c1565b840191505092915050565b6000602082019050818103600083015261358f818461353c565b905092915050565b600080600080606085870312156135b1576135b0612d43565b5b60006135bf87828801612e61565b945050602085013567ffffffffffffffff8111156135e0576135df612d48565b5b6135ec87828801612f6a565b935093505060406135ff87828801612f46565b91505092959194509250565b60008060008060006080868803121561362757613626612d43565b5b600061363588828901612eee565b955050602061364688828901612f46565b945050604086013567ffffffffffffffff81111561366757613666612d48565b5b61367388828901612f6a565b9350935050606061368688828901612f46565b9150509295509295909350565b6000602082840312156136a9576136a8612d43565b5b60006136b7848285016130fa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136fa82612e40565b915061370583612e40565b925082820390508181111561371d5761371c6136c0565b5b92915050565b60006040820190506137386000830185613440565b6137456020830184612ea3565b9392505050565b600081905092915050565b50565b600061376760008361374c565b915061377282613757565b600082019050919050565b60006137888261375a565b9150819050919050565b600061379e8385613501565b93506137ab83858461327e565b6137b4836131c1565b840190509392505050565b60006060820190506137d46000830187612ea3565b81810360208301526137e7818587613792565b90506137f66040830184613494565b95945050505050565b7f4465636973696f6e2074696d656f7574206d757374206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b600061385b602783613501565b9150613866826137ff565b604082019050919050565b6000602082019050818103600083015261388a8161384e565b9050919050565b60006040820190506138a6600083018561346a565b6138b3602083018461346a565b9392505050565b60006138c582612e40565b91506138d083612e40565b92508282019050808211156138e8576138e76136c0565b5b92915050565b7f547275737465652061646472657373206d757374206265206e6f6e2d7a65726f600082015250565b6000613924602083613501565b915061392f826138ee565b602082019050919050565b6000602082019050818103600083015261395381613917565b9050919050565b7f41646d696e2061646472657373206d757374206265206e6f6e2d7a65726f0000600082015250565b6000613990601e83613501565b915061399b8261395a565b602082019050919050565b600060208201905081810360008301526139bf81613983565b9050919050565b7f4d696e20636f6c6c61746572616c20696e637265617365206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b6000613a22602e83613501565b9150613a2d826139c6565b604082019050919050565b60006020820190508181036000830152613a5181613a15565b9050919050565b6000819050919050565b6000819050919050565b6000613a87613a82613a7d84613a58565b613a62565b61314f565b9050919050565b613a9781613a6c565b82525050565b6000602082019050613ab26000830184613a8e565b92915050565b6000604082019050613acd6000830185612ea3565b613ada6020830184612ea3565b9392505050565b60006040820190508181036000830152613afc818587613792565b9050613b0b6020830184613494565b949350505050565b6000613b1e8261314f565b9150613b298361314f565b9250828201905067ffffffffffffffff811115613b4957613b486136c0565b5b92915050565b600060a082019050613b646000830189613440565b613b716020830188612ea3565b613b7e604083018761346a565b8181036060830152613b91818587613792565b9050613ba06080830184613494565b979650505050505050565b6000613bb682612e40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613be857613be76136c0565b5b600182019050919050565b7f4e657720747275737465652063616e6e6f74206265207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c4f602283613501565b9150613c5a82613bf3565b604082019050919050565b60006020820190508181036000830152613c7e81613c42565b9050919050565b600081519050613c9481612e4a565b92915050565b600060208284031215613cb057613caf612d43565b5b6000613cbe84828501613c85565b91505092915050565b600081519050613cd681612ed7565b92915050565b600060208284031215613cf257613cf1612d43565b5b6000613d0084828501613cc7565b91505092915050565b6000604082019050613d1e6000830185613440565b613d2b6020830184613087565b9392505050565b600081519050919050565b6000613d4882613d32565b613d52818561374c565b9350613d62818560208601613512565b80840191505092915050565b6000613d7a8284613d3d565b91508190509291505056fea2646970667358221220704140b8c32fdf47ceb082ad252c8fb2b492e834d3f292d54f9bb81f1c540b8a64736f6c63430008160033"
    )]
    CollateralUpgradeable,
    "./src/CollateralUpgradableABI.json"
);

#[derive(Debug, Clone)]
pub struct Reclaim {
    pub hotkey: [u8; 32],
    pub executor_id: [u8; 16],
    pub miner: Address,
    pub amount: U256,
    pub deny_timeout: u64,
}

impl From<(FixedBytes<32>, FixedBytes<16>, Address, U256, u64)> for Reclaim {
    fn from(tuple: (FixedBytes<32>, FixedBytes<16>, Address, U256, u64)) -> Self {
        Self {
            hotkey: {
                let mut hk = [0u8; 32];
                hk.copy_from_slice(tuple.0.as_slice());
                hk
            },
            executor_id: {
                let mut b = [0u8; 16];
                b.copy_from_slice(tuple.1.as_slice());
                b
            },
            miner: tuple.2,
            amount: tuple.3,
            deny_timeout: tuple.4,
        }
    }
}

pub enum CollateralEvent {
    Deposit(CollateralUpgradeable::Deposit),
    Reclaimed(CollateralUpgradeable::Reclaimed),
    Slashed(CollateralUpgradeable::Slashed),
}

// get the collateral contract instance with custom network config
pub async fn get_collateral(
    private_key: &str,
    network_config: &CollateralNetworkConfig,
) -> Result<
    CollateralUpgradeable::CollateralUpgradeableInstance<impl alloy_provider::Provider>,
    anyhow::Error,
> {
    let mut signer: PrivateKeySigner = private_key.parse()?;
    signer.set_chain_id(Some(network_config.chain_id));

    let provider = ProviderBuilder::new()
        .wallet(signer)
        .connect(&network_config.rpc_url)
        .await?;

    let proxied = CollateralUpgradeable::new(network_config.contract_address, provider);

    Ok(proxied)
}

pub async fn scan_events(
    from_block: u64,
    network_config: &CollateralNetworkConfig,
) -> Result<(u64, HashMap<u64, Vec<CollateralEvent>>), anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let current_block = provider.get_block_number().await?.saturating_sub(1);

    if from_block > current_block {
        return Err(anyhow::anyhow!(
            "from_block must be less than current_block"
        ));
    }

    let mut to_block = from_block + MAX_BLOCKS_PER_SCAN;

    if to_block > current_block {
        to_block = current_block;
    }
    scan_events_with_scope(from_block, to_block, network_config).await
}

pub async fn scan_events_with_scope(
    from_block: u64,
    to_block: u64,
    network_config: &CollateralNetworkConfig,
) -> Result<(u64, HashMap<u64, Vec<CollateralEvent>>), anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;

    let filter = Filter::new()
        .address(network_config.contract_address)
        .from_block(from_block)
        .to_block(to_block);

    let logs = provider.get_logs(&filter).await?;

    let mut result: HashMap<u64, Vec<CollateralEvent>> = HashMap::new();

    for log in logs {
        if log.removed {
            continue;
        }

        let topics = log.inner.topics();
        let topic0 = topics.first();
        let block_number = log
            .block_number
            .ok_or(anyhow::anyhow!("Block number not available in event"))?;

        let block_result = result.get_mut(&block_number);

        let event = match topic0 {
            Some(sig) if sig == &CollateralUpgradeable::Deposit::SIGNATURE_HASH => {
                let deposit = CollateralUpgradeable::Deposit::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Deposit(deposit))
            }
            Some(sig) if sig == &CollateralUpgradeable::Reclaimed::SIGNATURE_HASH => {
                let reclaimed = CollateralUpgradeable::Reclaimed::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Reclaimed(reclaimed))
            }
            Some(sig) if sig == &CollateralUpgradeable::Slashed::SIGNATURE_HASH => {
                let slashed = CollateralUpgradeable::Slashed::decode_raw_log(
                    topics,
                    log.data().data.as_ref(),
                )?;
                Some(CollateralEvent::Slashed(slashed))
            }
            _ => None,
        };

        if let Some(event) = event {
            match block_result {
                Some(events) => {
                    events.push(event);
                }
                None => {
                    result.insert(block_number, vec![event]);
                }
            }
        }
    }

    info!(
        "Scanned blocks {} to {}, {} events are found",
        from_block,
        to_block,
        result.values().map(|v| v.len()).sum::<usize>()
    );
    Ok((to_block, result))
}
// transactions
pub async fn deposit(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    amount: U256,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract
        .deposit(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_id),
        )
        .value(amount);
    let tx = tx.send().await?;
    let receipt = tx.get_receipt().await?;
    tracing::info!("{receipt:?}");
    Ok(())
}

pub async fn deposit_with_config(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    amount: U256,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract
        .deposit(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_id),
        )
        .value(amount);
    let tx = tx.send().await?;
    let receipt = tx.get_receipt().await?;
    tracing::info!("{receipt:?}");
    Ok(())
}

pub async fn reclaim_collateral(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    url: &str,
    url_content_md5_checksum: u128,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract.reclaimCollateral(
        FixedBytes::from_slice(&hotkey),
        FixedBytes::from_slice(&executor_id),
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn finalize_reclaim(
    private_key: &str,
    reclaim_request_id: U256,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract.finalizeReclaim(reclaim_request_id);
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn deny_reclaim(
    private_key: &str,
    reclaim_request_id: U256,
    url: &str,
    url_content_md5_checksum: u128,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract.denyReclaimRequest(
        reclaim_request_id,
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

pub async fn slash_collateral(
    private_key: &str,
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    slash_amount: U256,
    url: &str,
    url_content_md5_checksum: u128,
    network_config: &CollateralNetworkConfig,
) -> Result<(), anyhow::Error> {
    let contract = get_collateral(private_key, network_config).await?;

    let tx = contract.slashCollateral(
        FixedBytes::from_slice(&hotkey),
        FixedBytes::from_slice(&executor_id),
        slash_amount,
        url.to_string(),
        FixedBytes::from_slice(&url_content_md5_checksum.to_be_bytes()),
    );
    let tx = tx.send().await?;
    tx.get_receipt().await?;
    Ok(())
}

// Get methods

pub async fn netuid(network_config: &CollateralNetworkConfig) -> Result<u16, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let netuid = contract.NETUID().call().await?;
    Ok(netuid)
}

pub async fn trustee(network_config: &CollateralNetworkConfig) -> Result<Address, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let trustee = contract.TRUSTEE().call().await?;
    Ok(trustee)
}

pub async fn decision_timeout(
    network_config: &CollateralNetworkConfig,
) -> Result<u64, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let decision_timeout = contract.DECISION_TIMEOUT().call().await?;
    Ok(decision_timeout)
}

pub async fn min_collateral_increase(
    network_config: &CollateralNetworkConfig,
) -> Result<U256, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let min_collateral_increase = contract.MIN_COLLATERAL_INCREASE().call().await?;
    Ok(min_collateral_increase)
}

pub async fn executor_to_miner(
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    network_config: &CollateralNetworkConfig,
) -> Result<Address, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    // let executor_bytes = executor_id.to_be_bytes();
    let executor_to_miner = contract
        .executorToMiner(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_id),
        )
        .call()
        .await?;
    Ok(executor_to_miner)
}

pub async fn collaterals(
    hotkey: [u8; 32],
    executor_id: [u8; 16],
    network_config: &CollateralNetworkConfig,
) -> Result<U256, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let collaterals = contract
        .collaterals(
            FixedBytes::from_slice(&hotkey),
            FixedBytes::from_slice(&executor_id),
        )
        .call()
        .await?;
    Ok(collaterals)
}

pub async fn reclaims(
    reclaim_request_id: U256,
    network_config: &CollateralNetworkConfig,
) -> Result<Reclaim, anyhow::Error> {
    let provider = ProviderBuilder::new()
        .connect(&network_config.rpc_url)
        .await?;
    let contract = CollateralUpgradeable::new(network_config.contract_address, provider);
    let result = contract.reclaims(reclaim_request_id).call().await?;
    let reclaim = Reclaim::from((
        result.hotkey,
        result.executorId,
        result.miner,
        result.amount,
        result.denyTimeout,
    ));
    Ok(reclaim)
}
