name: Release CLI

on:
  push:
    tags:
      - "basilica-cli-v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., basilica-cli-v0.1.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
            # Validate that the tag starts with basilica-cli-v
            if [[ ! "$VERSION" =~ ^basilica-cli-v ]]; then
              echo "Error: Tag must start with 'basilica-cli-v' prefix"
              echo "Example: basilica-cli-v0.1.0"
              exit 1
            fi
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Remove 'basilica-cli-v' prefix to get clean version
          CLEAN_VERSION="${VERSION#basilica-cli-v}"
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Basilica CLI ${{ steps.version.outputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: false
          body: |
            For installation instructions, please visit [https://basilica.ai/](https://basilica.ai/)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux x86_64 - native build on Ubuntu 22.04 LTS
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            suffix: linux-amd64
          # Linux ARM64 - native build on GitHub ARM runner
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm # Free GitHub ARM runner
            suffix: linux-arm64
          # macOS Intel build
          - target: x86_64-apple-darwin
            os: macos-13 # Use macos-13 for Intel (x86_64) runners
            suffix: darwin-amd64
          # macOS Apple Silicon build
          - target: aarch64-apple-darwin
            os: macos-14 # Use macos-14 for Apple Silicon (M1) runners
            suffix: darwin-arm64
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 0
      CARGO_NET_RETRY: 10
      RUST_BACKTRACE: short
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-cli-${{ matrix.target }}

      # Install dependencies for Linux
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler pkg-config libssl-dev build-essential

      # Install dependencies for macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install protobuf pkg-config openssl

      # Build binary
      - name: Build binary
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15" # Ensure compatibility with older macOS versions
          BASILICA_AUTH0_CLIENT_ID: ${{ secrets.BASILICA_AUTH0_CLIENT_ID }}
          BASILICA_AUTH0_AUDIENCE: ${{ secrets.BASILICA_AUTH0_AUDIENCE }}
          BASILICA_AUTH0_ISSUER: ${{ secrets.BASILICA_AUTH0_ISSUER }}
          BASILICA_AUTH0_DOMAIN: ${{ secrets.BASILICA_AUTH0_DOMAIN }}
        run: |
          cargo build --release --locked --target ${{ matrix.target }} -p basilica-cli
          cp target/${{ matrix.target }}/release/basilica ./basilica-${{ matrix.suffix }}

      # Make binary executable and generate checksums
      - name: Prepare binary
        run: |
          chmod +x ./basilica-${{ matrix.suffix }}

          # Strip debug symbols to reduce size
          strip ./basilica-${{ matrix.suffix }}

          # Generate checksum
          if command -v shasum &> /dev/null; then
            shasum -a 256 ./basilica-${{ matrix.suffix }} > ./basilica-${{ matrix.suffix }}.sha256
          else
            sha256sum ./basilica-${{ matrix.suffix }} > ./basilica-${{ matrix.suffix }}.sha256
          fi

          # Display file info
          ls -lh ./basilica-${{ matrix.suffix }}

      # Upload binary
      - name: Upload Release Binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: |
            basilica-${{ matrix.suffix }}
            basilica-${{ matrix.suffix }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
